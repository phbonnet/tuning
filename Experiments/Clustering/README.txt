// Database Tuning: Principles, Experimentation and Design
// @ Dennis Shasha, Philippe Bonnet - 2001

Tool:		exptool
Schema:		employees
Indexes:	index1.sql  - create clustered index
		index1b.sql - drop clustered index
		index2.sql  - create non clustered index nc (hundreds2)
		index2b.sql - drop non clustered index nc
		index3.sql  - create non clustered index nc3
			      (ssnum, name, hundreds2)
		index2b.sql - drop non clustered index nc3
		index4.sql  - create non clustered index nc4
			      (hundreds2, ssnum, name)
		index2b.sql - drop non clustered index nc4


Scripts:	run1.sql - point query (ssnum)
		run2.sql - multipoint query (name)
		run3.sql - multipoint query (lat)
		run4.sql - multipoint query (hundreds2)
		run5.sql - range query (lat)
		run6.sql - range query (lat and long)
		run7.sql - multipoint query involving 3 attributes only
			    (hundreds2)
	        insert.sql (insertions)
		update.sql (upadtes)
	
Conf:		single scripts statement (queries - run{1-7}.sql)
		batch scripts (insertions and updates)


GOAL
---	
The goal of this experiment is to study different aspects of index usage.

(A) Benefits of clustering indexes

Make sure the database buffer and file buffer are empty before the experiment is started (cold start). You must ensure that disk accesses are perfomed to fetch data.

Make sure the correct indexes are created before you start a run.

Use Clustering.conf to configure exptool. Study the performance of
clustering index, non clustering index and scan for a point query, a
range query and a multipoint query. Use the sql file corresponding to
the type of query you want to study. *WARNING* you must adjust the
value of maxVal depending on the query that is run. maxVal fixes the
maximum value generated by exptool to replace the ? placeholder in the
query file. Depending on the attribute to which the placeholder is
associated, the maximum value is different. With the default data
(1000000 records in employees), the maximum value for hundreds1 and
hundreds2 is 10000; the maximum value for lat and long is 100000, the
maximum value for ssnum is 1000000.


(B) Benefits of non clustering index

Make sure the database buffer and file buffer are empty before the
experiment is started (cold start). You must ensure that disk accesses
are perfomed to fetch data.

Make sure the correct indexes are created before you start a run.

Vary the query selectivity using a fixed range in a modified version
of the range query in run5.sql (let us call run5b.sql the file
containing the query with the fixed range, i.e., ? are replaced by
values so that X% of the records are concerned by the query). Use
Clustering.conf to compare the performance of scan vs. nonclustering
index on a range query (sqlFile: run5b.sql).

Trace throughput as a function of query selectivity.

Use the explain utility to verify that the index is used.


(C) Benefits of covering index

Make sure the database buffer and file buffer are empty before the
experiment is started (cold start). You must ensure that disk accesses
are perfomed to fetch data.

Make sure the correct indexes are created before you start a run.

Use Covering.conf to compare a covering query (run7.sql) and a non
covering query (run4.sql). 

Trace throughput using a covering index (index3.sql) and a non
clustering index which does not provide the covering property
(index2.sql).

ORACLE
------

Unlike the other systems, Oracle does not provide clustered
index. Clustered indexes are approximated either by a (non-clustered
index) over a clustered attribute or by an index-organized table whose
primary key includes the attribute on which the table should be
clustered.

init.sql creates the table employees clustered over its hundreds2
attribute.  init1.sql creates a clustered index on the primary key of
the table employees (namely a concatenation of ssnum and hundreds2).
init2.sql creates the table employees without cluster.
